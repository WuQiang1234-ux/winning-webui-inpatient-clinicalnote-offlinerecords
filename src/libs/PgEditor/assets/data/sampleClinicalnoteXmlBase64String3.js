const xml =
  '﻿<?xml version="1.0" encoding="utf-8"?>
<XTextDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" EditorVersionString="1.2019.11.27">
   <Attributes />
   <DataBindingContentVersion>0</DataBindingContentVersion>
   <XElements>
      <Element xsi:type="XTextHeader">
         <Attributes />
         <AcceptTab>true</AcceptTab>
         <DataBindingContentVersion>0</DataBindingContentVersion>
         <XElements>
            <Element xsi:type="XInputField" StyleIndex="0">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>STATIC.0001</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>02e3de52-ed02-4100-8993-53afa951056a</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="1">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>汉中市中心医院</Text>
                  </Element>
               </XElements>
               <Deleteable>false</Deleteable>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>当前医院名称</Name>
               <InnerValue>汉中市中心医院</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>当前医院名称</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="2" />
            <Element xsi:type="XString" StyleIndex="3">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>外科</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="4">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>入院记录</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="2" />
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>姓名：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>STATIC.0026</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>aff3ab21-e560-4302-8340-62efcaba7250</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="7">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>韦小光</Text>
                  </Element>
               </XElements>
               <Deleteable>false</Deleteable>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>患者姓名</Name>
               <InnerValue>韦小光</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>姓名</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>                                             病历号：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>STATIC.0022</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>cab81800-d766-435d-b4d6-be8c552d14a8</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="7">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>0367897</Text>
                  </Element>
               </XElements>
               <Deleteable>false</Deleteable>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>住院病历号</Name>
               <InnerValue>0367897</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>病历号</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="8" />
         </XElements>
      </Element>
      <Element xsi:type="XTextBody">
         <Attributes />
         <AcceptTab>true</AcceptTab>
         <DataBindingContentVersion>0</DataBindingContentVersion>
         <XElements>
            <Element xsi:type="XTextTable" StyleIndex="9" NumOfRows="5" NumOfColumns="4">
               <Attributes>
                  <Attribute>
                     <Name>IsAllowSaveAs</Name>
                     <Value>True</Value>
                  </Attribute>
                  <Attribute>
                     <Name>IsFixedTableRows</Name>
                     <Value>False</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TableType</Name>
                     <Value>None</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Table</Value>
                  </Attribute>
               </Attributes>
               <ID>table1</ID>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements>
                  <Element xsi:type="XTextTableRow">
                     <Attributes />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>姓名：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="7">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0026</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>InputText</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>a34ade62-bb4d-457b-8f5b-b5011afa6ba9</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <ToolTip />
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>True</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>韦小光</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>患者姓名</Name>
                                 <InnerValue>韦小光</InnerValue>
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>姓名</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>出生地：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="12">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0032</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>InputText</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>86b2e6ae-7b6c-4ba5-b8d5-dc76331a0010</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <ToolTip />
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>陕西省</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>出生地-省（自治区、直辖市）</Name>
                                 <InnerValue>陕西省$$$</InnerValue>
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>出生地</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                     </XElements>
                     <CloneType>ContentWithClearField</CloneType>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <Attributes />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>性别：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="7">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0027</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>abafe575-64a5-4c24-bee0-8dc77b7a78ff</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>True</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>女</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>性别</Name>
                                 <InnerValue>2</InnerValue>
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>性别</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>职业：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="7">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0031</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>7f8d3709-a907-467e-b0ce-e4cac46e64a6</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>职业</Name>
                                 <InnerValue />
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>职业</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                     </XElements>
                     <CloneType>ContentWithClearField</CloneType>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <Attributes />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>年龄：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="7">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0028</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>InputText</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>375aadaa-4d6a-4b8a-810f-1e6865d3d621</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <ToolTip />
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>True</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>25岁</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>年龄(岁)</Name>
                                 <InnerValue>25岁</InnerValue>
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>年龄</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>入院日期：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="7">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0066</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DateTime</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>3d268f58-1b01-4cb6-9b06-51d780f73780</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <ToolTip />
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>True</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>2014-08-20 18:42</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>入院日期时间</Name>
                                 <InnerValue>2014-08-20 18:42</InnerValue>
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>入院日期</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                     </XElements>
                     <CloneType>ContentWithClearField</CloneType>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <Attributes />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>民族：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="12">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0034</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>d5f5ff1b-2c0c-471f-8553-db92333e7f0f</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>汉族</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>民族</Name>
                                 <InnerValue />
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>民族</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>记录日期：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="12">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0008</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DateTime</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>e55db9cc-554b-48d7-adad-f203a05da873</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <ToolTip />
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>2021-05-10 10:35</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>记录日期时间</Name>
                                 <InnerValue>2021-05-10 10:35</InnerValue>
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>记录日期</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                     </XElements>
                     <CloneType>ContentWithClearField</CloneType>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <Attributes />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>婚姻：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="7">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>STATIC.0029</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>ca2337e6-cf73-48fb-a10f-3384d6724e8f</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>True</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="6">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>未婚</Text>
                                    </Element>
                                 </XElements>
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>婚姻状况</Name>
                                 <InnerValue />
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>婚姻</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>True</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="5">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>病史陈述者：</Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="10" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="27">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Cell</Value>
                              </Attribute>
                           </Attributes>
                           <ID />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="6">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>SJY.2.1000.6605</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>de112575-11a2-4d7a-a857-4ba581e0e0cd</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <Deleteable>false</Deleteable>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>陈述者与患者的关系名称</Name>
                                 <InnerValue />
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>病史陈述者</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="11" />
                           </XElements>
                        </Element>
                     </XElements>
                     <CloneType>ContentWithClearField</CloneType>
                  </Element>
               </XElements>
               <PrintVisibility>None</PrintVisibility>
               <Columns>
                  <Element xsi:type="XTextTableColumn">
                     <Attributes />
                     <Width>375.0661</Width>
                  </Element>
                  <Element xsi:type="XTextTableColumn">
                     <Attributes />
                     <Width>412.3819</Width>
                  </Element>
                  <Element xsi:type="XTextTableColumn">
                     <Attributes />
                     <Width>454.2208</Width>
                  </Element>
                  <Element xsi:type="XTextTableColumn">
                     <Attributes />
                     <Width>878.2639</Width>
                  </Element>
               </Columns>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.280</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>7240e5d4-d687-49e2-8c9f-31508714f78d</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>主诉</Name>
               <Enabled>false</Enabled>
               <Width>137.835678</Width>
               <Height>52.2786369</Height>
               <Text>主诉：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.231.1000.6591</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>ae890189-af62-4da9-bc2d-023d7da37c7b</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>主诉</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>主诉</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.90</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>ff9e423f-9f9b-4113-a159-6dc4bd4001b8</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>现病史</Name>
               <Enabled>false</Enabled>
               <Width>183.7809</Width>
               <Height>52.2786369</Height>
               <Text>现病史：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.231.1000.6592</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>56306fc4-1399-4447-b6d1-fa89d84c06d0</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>现病史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>现病史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.283</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>67cda7c4-282f-43ee-b83c-675f2a3b6f70</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>既往史</Name>
               <Enabled>false</Enabled>
               <Width>183.7809</Width>
               <Height>52.2786369</Height>
               <Text>既往史：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>a145bbbd-2cc3-4e3f-bfe8-9c5699f62db5</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.244.1000.7358</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>InputText</Value>
                        </Attribute>
                     </Attributes>
                     <ID>925413f1-e1b2-4d3d-b02b-f5f3cbe4a692</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>疾病诊断名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>疾病诊断名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>8ab4d556-2158-4f5a-9850-472878cf77aa</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，传染病名称：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.63.1000.5919</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>8ccc0e6a-5e4b-46bd-9992-2edcf005a89e</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>传染病名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>传染病名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，持续时间：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.232.1000.6802</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>8f950a89-6c87-459a-a00a-b91eb14c59ec</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText>天</UnitText>
                     <LabelText />
                     <Name>持续时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>持续时间</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>90f2f11b-fbed-4e00-b8ec-4d6ec5181624</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，手术名称：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.224.1000.7498</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Wordbook</Value>
                        </Attribute>
                     </Attributes>
                     <ID>45430515-d584-4139-b78a-35c389e32598</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>手术名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>手术名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，手术日期：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.232.1000.6585</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>e70d9036-164a-4980-ad3a-2a349cf0f307</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>手术日期时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>手术时间</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>c426a2ba-0f6a-4449-a4c6-0f3c2658075c</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，外伤原因：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.3025</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>993fc398-d16c-4771-9b9b-6cd8a7897d32</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>外伤原因</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>外伤原因</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，外伤时间：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>72199aba-4ab1-49c2-ac82-f9a9e1e5ba47</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>外伤时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>外伤时间</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>89402ffd-9484-4b94-92c4-bcfa328afcb0</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏药物：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.3023</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>5289da1b-0afe-469e-a3a6-3e6c0a779065</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏药物</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏药物</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏情况：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.4371</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>5e9c2d08-b893-46e3-8b98-4efc2d02f46a</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏情况</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏情况</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>a746011d-1abd-4fa5-84bb-7852e380f9ee</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏源：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.6478</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>96fe7a4b-daf8-4927-b74c-a8145088077a</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏源</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏源</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>de06ab08-bbac-4ae8-a2dd-b6c6cdd8bf20</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，疫苗名称：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>InputPrompt</Value>
                        </Attribute>
                     </Attributes>
                     <ID>410bd1ee-99be-41eb-aa5f-6a2956a1d9f8</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>疫苗名称</Name>
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>疫苗名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>ad4a0cfa-c3b3-4e39-867d-e57b0ff00116</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，曾患</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.244.1000.7358</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>InputText</Value>
                        </Attribute>
                     </Attributes>
                     <ID>bff0bbd5-a74d-4bd6-8c88-af81d6a56964</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>疾病诊断名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>疾病名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>bf561352-2cd9-4849-8da7-7c9826e7effd</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>e50dbc32-020c-47fc-9949-3170a19c9152</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.63.1000.5919</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DropDownList</Value>
                              </Attribute>
                           </Attributes>
                           <ID>b0496f86-69ca-49d4-9005-9f58659ba9f4</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>传染病名称</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>传染病名称</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>8a2730dc-c258-43ca-b4e7-7f75374fd0c7</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，手术日期：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.232.1000.6585</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>e439663b-be0e-427e-ac16-d150d17be671</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>手术日期时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>手术日期</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，手术名称：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.224.1000.7498</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Wordbook</Value>
                        </Attribute>
                     </Attributes>
                     <ID>723cb929-945f-4841-9bba-d6c6b189240a</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>手术名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>手术名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>b56440cf-1298-4eed-9dd8-7939990b1193</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>ed48444c-e609-44d1-a0e3-97f6cc8253d0</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，外伤时间：</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.46.5249447430506027250</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DateTime</Value>
                              </Attribute>
                           </Attributes>
                           <ID>a577a8f9-ab50-4272-ae3a-e9ece8c0a7b4</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>外伤时间</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>外伤时间</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>a87b12c0-865c-4bb8-b016-97b918d9734d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，输血日期：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.232.1000.4657</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>2e71b5ba-5be7-478c-86ee-83b7821908dd</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>输血日期时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>输血日期</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，输血反应：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.4546</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>986764c5-2c9d-4492-a6a2-fff9e034f79d</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XInputField" StyleIndex="14">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DataGroup</Value>
                              </Attribute>
                           </Attributes>
                           <ID>9c1f3c35-d16b-497e-aab3-15a297aefec4</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XInputField" StyleIndex="16">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>SJY.10.1000.4546</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>986764c5-2c9d-4492-a6a2-fff9e034f79d</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="15">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>无</Text>
                                    </Element>
                                 </XElements>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>有无输血反应</Name>
                                 <InnerValue />
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>有无输血反应</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                           </XElements>
                           <BorderElementColor />
                           <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                           <UnitText />
                           <Name />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText />
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>有无输血反应</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>有无输血反应</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>a67bd188-7c71-4312-bcbb-fc8e86a3e40e</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏药物：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.3023</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>c09e580e-dc49-464e-89e8-48e6b956290d</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏药物</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏药物</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>35408bf9-d23d-4acb-b4da-2c498ad6b4e8</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏食物：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.6478</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>72f2c7ae-5f3d-4d78-88a4-7147801868ac</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏源</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏源</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>一般健康状况：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1005</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>132ab01e-16a4-45df-9794-3c6e1f6e7d27</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>健康</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>健康状况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>健康状况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        疾病史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.61.1000.5354</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>6f50b333-8fdf-4427-8a86-75d49333574f</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无既往疾病史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无疾病史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>e9fde1b1-d0b4-4101-a308-d3060c55c143</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，曾患</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.244.1000.7358</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>InputText</Value>
                        </Attribute>
                     </Attributes>
                     <ID>957cf26a-d210-470b-a342-78222efde0dc</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>疾病诊断名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>疾病名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        传染病史</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>及其密切接触史</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.4400</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>900eae21-1bb0-4f3e-846e-281cafba2f6d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>传染病史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>传染病史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>0c553de9-a6e5-464f-8e93-679d7d573437</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>“</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.63.1000.5919</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>9d1ea83f-92e6-44ec-ac38-fc0751673375</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>传染病名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>传染病名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>”</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>传染病史，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1392</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>84a3c15e-0515-403b-b932-b1a359dffaa0</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>传染病接触史标志</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无传染病接触史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>传染病接触史</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        手术外伤史：手术史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.597</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>be92e6ed-e7f4-4fb7-bc14-02f722b6ac16</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>手术史标志</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无手术史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>16740dec-ea8f-41bf-b446-76e9b0cd425b</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，手术日期：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.232.1000.6585</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>63ebfd67-28d0-410c-9608-8fcc4e49eed4</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>手术日期时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>手术日期</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，手术名称：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.224.1000.7498</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Wordbook</Value>
                        </Attribute>
                     </Attributes>
                     <ID>02ecbda0-bf24-4b9d-92fb-a1affd0de7e8</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>手术名称</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>手术名称</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，外伤史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2280</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>73cddf67-74d8-4f0f-b144-b31befd878f8</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>外伤史标志</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无外伤史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>b6d2baaf-dcdc-449f-b5ca-4132bc9d3f9d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，外伤时间：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.46.5249447430506027250</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>7f70aa12-ee7a-4ab9-be23-0bbd5776f093</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>外伤时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>外伤时间</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="5" WhiteSpaceLength="8">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>输血史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2834</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>18605771-2cef-4242-b06e-d503c3f676fe</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无输血史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无输血史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>89dd96e3-a097-4103-aeb8-bc8197d0bda2</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，输血日期：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.232.1000.4657</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DateTime</Value>
                        </Attribute>
                     </Attributes>
                     <ID>96d3e703-c506-4bd2-bde9-80f7f85c6cb8</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>输血日期时间</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>输血日期时间</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，输血品种：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.5515</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>e3b67936-dd8f-4fbd-b1b6-b606224fea17</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>输血品种</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>输血品种</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，输血反应：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.66.1000.4184</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>d9c6a161-6e52-4c8e-b3d6-0d7fc08a7a4d</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>输血反应标志</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>输血反应标志</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        过敏史：药物过敏史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.3766</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>503e8a00-ff99-4986-b560-4f972b93fb86</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>药物过敏史标志</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无药物过敏史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>6cade264-16e0-4184-8866-f3c3a5e807cc</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏药物：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.3023</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>08dfc3f9-883b-4ce2-af4a-3491d2f0aa7c</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏药物</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏药物</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>；食物过敏史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2798</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>2b11ff88-c9d3-41df-a463-068df4c52644</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无食物过敏史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无食物过敏史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>0a0e3015-a2f1-4252-b377-3e13f4a29361</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，过敏食物：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.6478</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>3d93deb2-f6a9-4d7c-9d28-acaebe1b93bc</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>过敏源</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>过敏源</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="5" WhiteSpaceLength="8">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>预防接种史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1424</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>9516c86d-8371-4bda-b4d2-1cd1f841c126</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>不详</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>预防接种情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>预防接种情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.403</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>c48447c7-7cd3-4ec8-920c-7835bf02b261</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>个人史</Name>
               <Enabled>false</Enabled>
               <Width>183.7809</Width>
               <Height>52.2786369</Height>
               <Text>个人史：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>aa664898-3a37-4384-bfe9-08126fbda7ef</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>b48f0f23-a59f-4379-961c-c5c04108c206</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，日吸</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.82.1000.7600</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>799677e2-eea1-4b3c-a21c-cdd41bb37ca5</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText>支</UnitText>
                           <LabelText />
                           <Name>日吸烟量（支）</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>日吸烟量</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>ba75be46-7538-4f9b-98e8-852c6fb89099</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>ddf2f88a-3f1a-41c8-9967-784af1e20d2f</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，日饮</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.82.1000.7586</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>c2f443e3-ae20-4731-9bfc-ce5ad11df07e</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText>ml</UnitText>
                           <LabelText />
                           <Name>日饮酒量（两）</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>日饮酒量</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.82.1000.7591</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DropDownList</Value>
                              </Attribute>
                           </Attributes>
                           <ID>e4328ff4-5896-449c-973d-0dabcf8fc211</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>饮酒频率</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>饮酒频率</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>生于</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>STATIC.0032</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>795efaa1-b589-4483-9412-f2ee4b897490</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>陕西省</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>出生地</Name>
               <InnerValue>陕西省$$$</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>出生地</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.243.1000.7942</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>0cd4cc36-e59d-4a22-9a34-ce2c2fb45139</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <Deleteable>false</Deleteable>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>外地久居史，生活</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.5181</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>89b73caa-a37c-43e5-b66d-015d7390150c</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>规律</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>生活起居是否规律</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>生活起居是否规律</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.82.1000.7595</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>081060f2-7f74-4e06-916c-8406ffe0afab</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>否认</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>吸烟标志</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>吸烟标志</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>吸烟史</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>d592cec4-698a-4c2f-b019-c9ff0b48f0c4</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，日吸</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.82.1000.7600</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>53528035-f4ea-4f3e-9208-5e34f45919bd</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText>支</UnitText>
                     <LabelText />
                     <Name>日吸烟量（支）</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>日吸烟</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>；</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2651</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>8c92d494-dcd3-4573-a675-11c54e6f2511</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>否认</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无饮酒史及年限</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无饮酒史及年限</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>饮酒史</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>81380871-ffd0-4ea5-aa8b-fd497e498a04</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，日饮酒</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.82.1000.7586</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>009e0891-5e3c-4500-820a-d40399fa44ba</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText>ml</UnitText>
                     <LabelText />
                     <Name>日饮酒量（两）</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>日饮酒量</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.2371</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>0114782d-3bb3-4968-b761-79755406d465</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>戒酒标志</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>戒酒标志</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1603</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>9d1fb7da-7263-4a96-84c9-af78a1a5861d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无有害物接触史</Name>
               <InnerValue>ZY.1000.1603.1000.132898</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无有害物接触史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>毒物、粉尘及放射性物质接触史，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.4352</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>55316ef1-4c7d-45cd-aa62-a7b0d12af9f7</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无冶游史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无冶游史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>冶游史。</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.3193</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>712f304e-26bc-464e-beb4-70f16568489f</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无重大精神创伤</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无重大精神创伤</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>重大精神创伤史</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.77</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>c860e0ad-8a01-4137-9388-fb2d1e0d0780</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>月经史</Name>
               <Enabled>false</Enabled>
               <Width>183.7809</Width>
               <Height>52.2786369</Height>
               <Text>月经史：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>月经</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2881</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>d4fa1963-8784-4462-b8fe-9f4da2b19114</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>月经情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>月经情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XMedicalExpressionField" StyleIndex="5">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>MedicalExpression</Value>
                  </Attribute>
               </Attributes>
               <ID>0cb8b0fb-2ec1-49ef-b78a-292f2c647a17</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="18">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>初潮年龄,经期,周期,末次月经/绝经年龄</Text>
                  </Element>
               </XElements>
               <Deleteable>false</Deleteable>
               <BorderElementColor />
               <Name />
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
               <Enabled>false</Enabled>
               <Width>730.1797</Width>
               <Height>141.41301</Height>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text> ，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.797</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>2f0b5e81-a048-41e6-b2b3-2dc8e28a34ec</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>经量正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>经量</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>经量</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1467</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>fa4cb4d0-9bb6-4bd6-a53d-3faba4437cea</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无痛经</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无痛经</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>痛经。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.386</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>7e0282f7-ed70-4e32-90d8-9edc1acf11cd</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>婚育史</Name>
               <Enabled>false</Enabled>
               <Width>183.7809</Width>
               <Height>52.2786369</Height>
               <Text>婚育史：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>0f38c07e-c703-4b8d-bf38-a6ff14a47e3f</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.85.1000.140</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>3a1c1418-35b1-401b-89b2-62cf31dd01e3</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText>岁</UnitText>
                     <LabelText />
                     <Name>结婚年龄</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>结婚年龄</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>f27ce0a8-5619-4bec-8dbc-1dfbec9eb4cc</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>结婚年龄</Text>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="19">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>结婚，</Text>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>结婚</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.85.1000.140</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>088ffbca-0e08-49ab-99ba-0fcb6644ece5</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText>年</UnitText>
                           <LabelText />
                           <Name>结婚年数</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>结婚年数</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，配偶</Text>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="19">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>年龄：</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.2.1000.6615</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>75138270-aae4-4edf-b6ad-040d99062ea4</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText>岁</UnitText>
                           <LabelText />
                           <Name>年龄</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>年龄</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，配偶</Text>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="19">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>健康情况：</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.10.1000.4785</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DropDownList</Value>
                              </Attribute>
                           </Attributes>
                           <ID>6e23b8a2-65c2-4486-8bf2-694c7010415d</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="15">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>健康</Text>
                              </Element>
                           </XElements>
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>配偶健康状况</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>配偶健康状况</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，性生活</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.10.1000.2411</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DropDownList</Value>
                              </Attribute>
                           </Attributes>
                           <ID>cf999e9f-15b7-4e7b-834a-ef6319b3fd88</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="15">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>协调</Text>
                              </Element>
                           </XElements>
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>性生活是否协调</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>性生活是否协调</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>，婚姻家庭关系</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.10.1000.556</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DropDownList</Value>
                              </Attribute>
                           </Attributes>
                           <ID>85024523-3cca-4daa-85c0-b0cdeae6fe60</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="15">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>和睦</Text>
                              </Element>
                           </XElements>
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>夫妻关系</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>夫妻关系</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>。</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>d0279d9d-e8ff-40b6-a2bd-9fb02f99f6fb</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>育有</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>6e03dd22-cb2a-43b2-ae4c-bb920b9510ee</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>数量</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>数量</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>子</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>be82814c-43d4-418a-be0a-d9a41799a0dc</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>数量</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>数量</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>女，孩子健康状况：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.1005</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>63dcc527-d88e-44fc-b6ee-e8e30d8aa83f</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>良好</Text>
                        </Element>
                     </XElements>
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>健康状况</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>健康状况</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.85.1000.7618</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>c1dac639-e2dd-4850-b4b8-91096a70586a</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>未婚</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>婚姻状况类别</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>婚姻</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>7a4b3caf-6f33-45f0-b0f9-aecd4bf9e88e</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，结婚年龄：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.85.1000.140</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>5aa15cb1-96eb-484c-9b50-e0cd47d2a706</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>结婚年龄</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>结婚年龄</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，配偶</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.10.1000.4785</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DropDownList</Value>
                        </Attribute>
                     </Attributes>
                     <ID>138fcd6f-f15a-48ab-9795-ae90d11c931e</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>配偶健康状况</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>配偶健康状况</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.1.1000.507</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>8418b0ba-7b4f-4eb1-91c9-e4000e426e39</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>未育</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>生育状况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>生育状况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="14">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DataGroup</Value>
                  </Attribute>
               </Attributes>
               <ID>ef8863be-6b76-4a91-a4b4-6b4cf287be86</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="16">
                     <Attributes>
                        <Attribute>
                           <Name>Key</Name>
                           <Value>SJY.85.1000.6623</Value>
                        </Attribute>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>Numerical</Value>
                        </Attribute>
                     </Attributes>
                     <ID>8581e7b3-c982-4ed6-accb-92afee2e96d9</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements />
                     <StartBorderText />
                     <EndBorderText />
                     <BorderElementColor />
                     <UnitText />
                     <LabelText />
                     <Name>妊娠次数</Name>
                     <InnerValue />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText>妊娠</BackgroundText>
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>次，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>c3117fc0-4f6b-4595-9901-fa5a6832582a</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XInputField" StyleIndex="15">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.228.1000.6572</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>b9da39dc-bae0-4bb8-aaa4-a6c2c7a2b1ff</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText>次</UnitText>
                           <LabelText />
                           <Name>产次</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>产</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="15">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="14">
                     <Attributes>
                        <Attribute>
                           <Name>WinElementType</Name>
                           <Value>DataGroup</Value>
                        </Attribute>
                     </Attributes>
                     <ID>ca3277bc-4e70-442d-a4a3-966d3e9b8444</ID>
                     <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                     <ToolTip />
                     <EnableValueValidate>true</EnableValueValidate>
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>育有</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.87.1000.168</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>ba88f909-791b-4542-8d79-a76762b5d515</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>现有子女数（个）</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>几</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>子</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="16">
                           <Attributes>
                              <Attribute>
                                 <Name>Key</Name>
                                 <Value>SJY.87.1000.168</Value>
                              </Attribute>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>Numerical</Value>
                              </Attribute>
                           </Attributes>
                           <ID>f2b1c017-5127-44de-a843-4b60cb146b19</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements />
                           <StartBorderText />
                           <EndBorderText />
                           <BorderElementColor />
                           <UnitText />
                           <LabelText />
                           <Name>现有子女数（个）</Name>
                           <InnerValue />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText>几</BackgroundText>
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                        <Element xsi:type="XString" StyleIndex="15">
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <XElements xsi:nil="true" />
                           <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                           <Text>女，</Text>
                        </Element>
                        <Element xsi:type="XInputField" StyleIndex="14">
                           <Attributes>
                              <Attribute>
                                 <Name>WinElementType</Name>
                                 <Value>DataGroup</Value>
                              </Attribute>
                           </Attributes>
                           <ID>a784186a-d7a9-4daa-a048-3149d0fe9bcc</ID>
                           <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                           <ToolTip />
                           <EnableValueValidate>true</EnableValueValidate>
                           <DataBindingContentVersion>0</DataBindingContentVersion>
                           <ContentReadonly>False</ContentReadonly>
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="15">
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <XElements xsi:nil="true" />
                                 <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                 <Text>孩子健康状况：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="16">
                                 <Attributes>
                                    <Attribute>
                                       <Name>Key</Name>
                                       <Value>SJY.10.1000.1005</Value>
                                    </Attribute>
                                    <Attribute>
                                       <Name>WinElementType</Name>
                                       <Value>DropDownList</Value>
                                    </Attribute>
                                 </Attributes>
                                 <ID>30d1c75f-c020-4d24-84a0-6c585eacc8e7</ID>
                                 <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <DataBindingContentVersion>0</DataBindingContentVersion>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements>
                                    <Element xsi:type="XString" StyleIndex="15">
                                       <DataBindingContentVersion>0</DataBindingContentVersion>
                                       <XElements xsi:nil="true" />
                                       <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                                       <Text>良好</Text>
                                    </Element>
                                 </XElements>
                                 <StartBorderText />
                                 <EndBorderText />
                                 <BorderElementColor />
                                 <UnitText />
                                 <LabelText />
                                 <Name>健康状况</Name>
                                 <InnerValue />
                                 <PrintBackgroundText>False</PrintBackgroundText>
                                 <BackgroundText>健康状况</BackgroundText>
                                 <BorderVisible>Hidden</BorderVisible>
                                 <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                              </Element>
                           </XElements>
                           <BorderElementColor />
                           <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                           <UnitText />
                           <Name />
                           <PrintBackgroundText>False</PrintBackgroundText>
                           <BackgroundText />
                           <BorderVisible>Hidden</BorderVisible>
                           <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundTextColor>#99CCFF</BackgroundTextColor>
                     <UnitText />
                     <Name />
                     <PrintBackgroundText>False</PrintBackgroundText>
                     <BackgroundText />
                     <BorderVisible>Hidden</BorderVisible>
                     <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
                  </Element>
               </XElements>
               <BorderElementColor />
               <BackgroundTextColor>#99CCFF</BackgroundTextColor>
               <UnitText />
               <Name />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText />
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.466</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>afaf9d19-7265-41a9-8e2e-00fd02948ba0</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>家族史</Name>
               <Enabled>false</Enabled>
               <Width>183.7809</Width>
               <Height>52.2786369</Height>
               <Text>家族史：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>遗传病：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.577</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>47427b1e-50df-47c1-9a43-5dfba9ced140</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无家族类似发作史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无家族类似发作史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>传染病：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1159</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>c8ab610f-056e-452a-a2c7-4973f7c70c8a</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无家族传染病史</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无家族传染病史</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>近亲结婚：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.85.1000.5468</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>608ed640-02f3-4781-b8c0-fb50d98a82f3</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>否</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>近亲结婚</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>近亲结婚</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>        父：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.4125</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>8f4212b9-e113-4caa-9855-114671c016bb</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>健在</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>父亲是否健在</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>父亲是否健在</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，母：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.3655</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>253e0143-19e7-4a07-979d-f6f3177194cd</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>健在</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>母亲是否健在</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>母亲是否健在</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>兄弟姐妹</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.144</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>32ef7572-2a70-461e-9c2c-f9c150d9f954</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>健在</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>兄弟姐妹是否健在</Name>
               <InnerValue>ZY.1000.144.1000.39145</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>兄弟姐妹是否健在</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>ae5758a1-459c-493f-9667-f1c756530122</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>体格检查</Name>
               <Enabled>false</Enabled>
               <Width>321.952271</Width>
               <Height>52.2786369</Height>
               <Text>体  格  检  查</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="2" />
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>             T </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.89.1000.206</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Numerical</Value>
                  </Attribute>
               </Attributes>
               <ID>03bd0327-8056-4a17-864f-1b5e4eb311a8</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText>℃</UnitText>
               <LabelText />
               <Name>体温</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>体温</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>  P </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.89.1000.3550</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Numerical</Value>
                  </Attribute>
               </Attributes>
               <ID>dbc2cadf-b76e-417c-9da4-e35706a15adc</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText>次/分</UnitText>
               <LabelText />
               <Name>脉搏</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>脉搏</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17" WhiteSpaceLength="1">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="5" WhiteSpaceLength="1">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>R </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.89.1000.6573</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Numerical</Value>
                  </Attribute>
               </Attributes>
               <ID>3cb70a23-fbd3-4e9f-ad74-0b939b3e8768</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText>次/分</UnitText>
               <LabelText />
               <Name>呼吸</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>呼吸</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text> Bp</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="5" WhiteSpaceLength="1">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text> </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.88.1000.7465</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Numerical</Value>
                  </Attribute>
               </Attributes>
               <ID>85c16085-7114-4d78-8de9-2d378c7094d6</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>收缩压（mmHg）</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>收缩压</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>/</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.88.1000.7464</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Numerical</Value>
                  </Attribute>
               </Attributes>
               <ID>d1113670-311b-4ca3-9fc0-6bfee814cc8b</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText>mmhg</UnitText>
               <LabelText />
               <Name>舒张压（mmHg）</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>舒张压</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>628324e5-8dc5-49f8-a848-1fbc1d2af3ed</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>一般情况</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>一般情况：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>神志</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.3284</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>cdca0d91-7877-436d-967a-168e6b73defa</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>清醒</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>神志</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>神志</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>精神</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2673</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>e55897be-17c1-4822-8c8c-2a6949bc4210</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>精神</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>精神</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，发育</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1931</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>2a61d6da-9067-4a1f-a73b-9c9d9586aeee</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>发育</Name>
               <InnerValue>ZY.1000.1931.1000.140098</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>发育</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1092</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>07e7278c-35a0-456e-bc55-15070f9c76a6</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>营养良好</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>营养状况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>营养状况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2032</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>0bea6685-4de6-4fa2-8085-c3d0bc0f8a09</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>自主</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>体位</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>体位</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>体位，查体</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2813</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>72f4be18-0659-435d-9022-2cdd8c4753ad</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>合作</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>查体</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>查体</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.2</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>e3c6c08c-ac6c-4b34-8ba4-0879112a4bd5</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>皮肤黏膜</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>皮肤黏膜：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.243.1000.7942</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>e70fb025-5439-46eb-9ba8-b8669c26a560</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>黄染，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.3736</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>34a0ec9b-5ed3-4c02-8ad6-b8b172ccb1d0</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无出血点</Name>
               <InnerValue>ZY.1000.3736.1000.354491</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无出血点</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>出血点</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.3</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>e23e4214-05d5-4d80-9ada-8e4d113632ab</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>淋巴结</Name>
               <Enabled>false</Enabled>
               <Width>275.671356</Width>
               <Height>52.2786369</Height>
               <Text>浅表淋巴结：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.3596</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>a76da15c-528b-43e4-a71c-be478fc14e62</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>未触及</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>能否触及浅表淋巴结肿大</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>能否触及浅表淋巴结肿大</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>肿大。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.4</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>95f1b395-0a5a-40c9-b050-65fe009117ff</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>头部</Name>
               <Enabled>false</Enabled>
               <Width>321.616577</Width>
               <Height>52.2786369</Height>
               <Text>头部及其器官：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>头颅形状：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.348</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>5bc847ad-0fed-45e2-bac0-6327b5e0cc30</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>头颅形状</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>头颅形状</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，眼睑</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.654</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>61e81d25-a99d-4091-98ce-9dcb04f0e4ec</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>眼睑情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>眼睑情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>、</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1650</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>647cd59c-3423-4718-93d0-3e2151f1fbe1</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无眼睑充血</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无眼睑充血</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>充血、</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.243.1000.7942</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>e68a4e81-cf9e-43ae-a73b-150f9b78d579</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>苍白，</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>双侧瞳孔</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2676</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>5558d165-a0c1-4822-877f-c398ddc71abb</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>等圆、等大</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>瞳孔大小</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>瞳孔大小</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，对光反射</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2936</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>7410c58f-4522-4213-baa8-baa390aee118</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>存在</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>对光反射情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>对光反射情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。耳鼻</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.4311</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>dc785a00-5883-486d-ac7e-654076e8fc0d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>耳鼻情况</Name>
               <InnerValue>ZY.1000.4311.1000.355385</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>耳鼻情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，口唇</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2938</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>8bd6a2c9-309d-4360-94da-a1f26b76c76f</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无口唇发绀</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无口唇发绀</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>发绀，扁桃体</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2459</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>ba3a3604-2b09-45f0-81e0-648b5ba77847</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>扁桃体肿大情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>扁桃体肿大情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>肿大</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>、</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.243.1000.7942</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>b1d7c925-dd4d-47c2-97b0-fb8b20ce94c6</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>化脓</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.14</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>c34b07bb-2769-4dcd-85d1-8083a504d123</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>颈部</Name>
               <Enabled>false</Enabled>
               <Width>137.835678</Width>
               <Height>52.2786369</Height>
               <Text>颈部：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1337</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>7059b593-3398-4e84-a27f-6ccd9e3f6ae8</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>颈软</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>颈软或强直</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>颈软或强直</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.598</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>bb899fe4-82eb-4a6d-a254-3a2bd9b2132d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>气管居中</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>气管位置</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>气管位置</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，甲状腺</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.566</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>16801b7b-0a1a-4ca4-900f-daf64bce035d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无甲状腺肿大</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无甲状腺肿大</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>肿大，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1498</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>13879f4f-dc44-4cbd-87ee-e7fc16d763ea</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无颈静脉怒张</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无颈静脉怒张</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>颈静脉怒张。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.6</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>8f505607-6c11-475b-be50-35f282325c7e</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>胸部</Name>
               <Enabled>false</Enabled>
               <Width>137.835678</Width>
               <Height>52.2786369</Height>
               <Text>胸部：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>胸廓</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2509</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>d7f6141f-c883-4d33-8d5c-1433c9a6f533</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>对称</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>胸廓是否对称</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>胸廓是否对称</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，双侧</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1743</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>d0840e3e-bc5f-4338-a95f-d53a41ea0709</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>呼吸运动对称</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>双侧呼吸运动是否对称</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>双侧呼吸运动是否对称</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，双肺</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2460</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>8de7488a-11ec-4ac9-8399-c1ed7be9bc19</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>未及</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>是否可及啰音</Name>
               <InnerValue>ZY.1000.2460.1000.190729</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>是否可及啰音</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.4214</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>ec809561-9ba5-451f-a56c-10fbc4a4e557</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>啰音类型</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>啰音类型</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>心前区</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.4208</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>ead574ca-2213-4207-a5f3-e58a773bcb51</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>有无心前区隆起或凹陷</Name>
               <InnerValue>ZY.1000.4208.1000.391990</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>有无心前区隆起或凹陷</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>隆起，心界</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.5088</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>69fea287-41c0-47b2-be80-2776a0d093ee</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>心界情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>心界情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，心率</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.120.1000.7</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Numerical</Value>
                  </Attribute>
               </Attributes>
               <ID>f7be07a4-c6ff-4753-be2b-6a3a4fc6b520</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText>次/分</UnitText>
               <LabelText />
               <Name>心率(次/分)</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>心率</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，律</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.120.1000.1999</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>957c8807-32fb-40a1-a479-2610b5d892bc</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>规整</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>心律</Name>
               <InnerValue>ZYMX.444289</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>心律</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，各瓣膜听诊区</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.2419</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>81813145-9d86-4d1b-9cdb-15af22a30f4d</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>未闻及</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>能否闻及病理性杂音</Name>
               <InnerValue>ZY.1000.2419.1000.190460</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>能否闻及病理性杂音</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>病理性杂音。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.10</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>b1e5904b-b7bf-463d-a3f5-abb04f69c542</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Name>脊柱</Name>
               <Enabled>false</Enabled>
               <Width>91.89045</Width>
               <Height>52.2786369</Height>
               <Text>脊柱</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.11</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>4734e398-ad41-4c04-accf-374823e6dcf9</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>四肢</Name>
               <Enabled>false</Enabled>
               <Width>137.835678</Width>
               <Height>52.2786369</Height>
               <Text>四肢：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.127.1000.1508</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>d5a452a2-317e-4008-b9af-4f0cea7a96a0</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>脊柱正常</Text>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="21">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>、</Text>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>四肢(正常)</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>脊柱四肢</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>脊柱四肢</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.773</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>eaa39bd7-de8f-4d0c-9a8c-85b6414966fb</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>四肢活动自如</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>四肢活动情况</Name>
               <InnerValue>ZY.1000.773.1000.1392</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>四肢活动情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.13</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>7a0f97fd-f29e-4bb7-a914-11a0910b187f</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>神经系统</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>神经系统：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>腹壁反射</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1277</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>1087337c-2e9e-4aa6-8c8a-c6553a0583c1</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>腹壁反射</Name>
               <InnerValue>ZYMX.442149</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>腹壁反射</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>膝腱反射</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.139.1000.4243</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>c7b2d3e6-3461-418e-85b7-8e3b1622d776</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="20">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>膝腱反射（右）</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>膝腱反射（右）</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，巴氏征</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1951</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>853659b8-137e-4b7d-9ac3-c70887f86509</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>无</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>双侧巴氏征</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>双侧巴氏征</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>，脑膜刺激征</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1945</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>f74afc44-f812-4996-9958-cc79524776a2</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>阴性</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>脑膜刺激征</Name>
               <InnerValue>ZY.1000.1945.1000.150812</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>脑膜刺激征</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="17">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.166.9</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>2</Value>
                  </Attribute>
               </Attributes>
               <ID>d2e3e473-b6eb-48d7-b0ce-3f12612178c7</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>外生殖器：</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>外生殖器：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>外观</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.10.1000.1572</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>DropDownList</Value>
                  </Attribute>
               </Attributes>
               <ID>1bea4aa1-1988-4f51-9993-d6229683bd39</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>正常</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>外生殖器检查</Name>
               <InnerValue>ZY.1000.1572.1000.132798</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>外生殖器检查</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XString" StyleIndex="5">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>。</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.457</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>40afb5aa-62f0-48f9-8718-097849075c27</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>专科情况：</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>专科情况：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.231.1000.6597</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>e866cd75-4bb7-48e5-9a4d-3bd2e3dac538</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>专科情况</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>专科情况</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.441</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>b9b285a7-d770-420f-85f3-4b233ef26a33</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>辅助检查</Name>
               <Enabled>false</Enabled>
               <Width>321.952271</Width>
               <Height>52.2786369</Height>
               <Text>辅  助  检  查</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="2" />
            <Element xsi:type="XString" StyleIndex="17" WhiteSpaceLength="4">
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <XElements xsi:nil="true" />
               <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
               <Text>    </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>SJY.231.1000.6596</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>InputText</Value>
                  </Attribute>
               </Attributes>
               <ID>7eb215b0-b51f-429d-ad33-d4c9126f4aaa</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <ToolTip />
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>辅助检查</Name>
               <InnerValue />
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>辅助检查</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.114</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>1dc6a162-7f5d-4aaa-9ca0-94cc42a3cd33</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>初步诊断</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>初步诊断：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>EventKey</Name>
                     <Value>{E7D2F50E-A87A-44F3-BE83-1E831254C17E}</Value>
                  </Attribute>
                  <Attribute>
                     <Name>EventName</Name>
                     <Value>初步诊断插件</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>ExternalDataSource</Value>
                  </Attribute>
               </Attributes>
               <ID>7910fe8e-218d-448f-a7b9-d1b49a88253e</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>1.病毒性脑膜脑炎</Text>
                  </Element>
                  <Element xsi:type="XLineBreak" StyleIndex="22" />
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>2.中枢神经系统的慢病毒感染</Text>
                  </Element>
               </XElements>
               <Deleteable>false</Deleteable>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>初步诊断插件</Name>
               <InnerValue>10003|10002</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>初步诊断</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="23" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.247</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>9c314aec-a11e-458d-b8bc-fc7b9353b3b6</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>医师签名</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>医师签名：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="24">
               <Attributes>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Signature</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>S0_65536</Value>
                  </Attribute>
               </Attributes>
               <ID>73ab92bd-2f78-4571-a952-c012c3b5008f</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>supervisor</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <UserEditable>false</UserEditable>
               <Name>医生签名</Name>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>医生签名</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <EnableHighlight>Disabled</EnableHighlight>
               <RuntimeEnableHighlight>Disabled</RuntimeEnableHighlight>
               <FieldSettings>
                  <ListItems />
               </FieldSettings>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="25" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.749</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>040ed932-570a-458e-a534-bb81455c6bda</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>修正诊断</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>修正诊断：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>EventKey</Name>
                     <Value>{E7D2F50E-A87A-44F3-BE83-1E831254C15E}</Value>
                  </Attribute>
                  <Attribute>
                     <Name>EventName</Name>
                     <Value>修正诊断插件</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>ExternalDataSource</Value>
                  </Attribute>
               </Attributes>
               <ID>1fd4fe06-f0a5-430e-8b06-a0827a7e07c7</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>1.病毒性脑膜脑炎</Text>
                  </Element>
                  <Element xsi:type="XLineBreak" StyleIndex="22" />
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>2.森林型黄热病</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>修正诊断插件</Name>
               <InnerValue>10003|10004</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>修正诊断</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="26" />
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XTextLabelElement" StyleIndex="13">
               <Attributes>
                  <Attribute>
                     <Name>Key</Name>
                     <Value>DLDM.672</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>Section</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
               </Attributes>
               <ID>64e80bd3-2983-4226-b547-a2c91fb20ca4</ID>
               <PropertyExpressions />
               <ContentReadonly>False</ContentReadonly>
               <Deleteable>false</Deleteable>
               <Name>补充诊断</Name>
               <Enabled>false</Enabled>
               <Width>229.726135</Width>
               <Height>52.2786369</Height>
               <Text>补充诊断：</Text>
               <PageTexts />
            </Element>
            <Element xsi:type="XInputField" StyleIndex="12">
               <Attributes>
                  <Attribute>
                     <Name>EventKey</Name>
                     <Value>{E7D2F50E-A87A-44F3-BE83-1E831254C112}</Value>
                  </Attribute>
                  <Attribute>
                     <Name>EventName</Name>
                     <Value>补充诊断插件</Value>
                  </Attribute>
                  <Attribute>
                     <Name>WinElementType</Name>
                     <Value>ExternalDataSource</Value>
                  </Attribute>
               </Attributes>
               <ID>cc4741fc-34b6-4c31-a652-0e79d22c24cd</ID>
               <HiddenPrintWhenEmpty>true</HiddenPrintWhenEmpty>
               <EnableValueValidate>true</EnableValueValidate>
               <DataBindingContentVersion>0</DataBindingContentVersion>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>1.病毒性脑膜脑炎</Text>
                  </Element>
                  <Element xsi:type="XLineBreak" StyleIndex="22" />
                  <Element xsi:type="XString" StyleIndex="6">
                     <DataBindingContentVersion>0</DataBindingContentVersion>
                     <XElements xsi:nil="true" />
                     <AcceptChildElementTypes2>Text</AcceptChildElementTypes2>
                     <Text>2.带状疱疹并发眼睑皮炎</Text>
                  </Element>
               </XElements>
               <StartBorderText />
               <EndBorderText />
               <BorderElementColor />
               <UnitText />
               <LabelText />
               <Name>补充诊断插件</Name>
               <InnerValue>10003|10006</InnerValue>
               <PrintBackgroundText>False</PrintBackgroundText>
               <BackgroundText>补充诊断</BackgroundText>
               <BorderVisible>Hidden</BorderVisible>
               <RuntimeEnableHighlight>Enabled</RuntimeEnableHighlight>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="26" />
         </XElements>
         <GridLine>
            <ColorValue>#00000000</ColorValue>
            <GridNumInOnePage>40</GridNumInOnePage>
         </GridLine>
      </Element>
      <Element xsi:type="XTextFooter">
         <Attributes />
         <AcceptTab>true</AcceptTab>
         <DataBindingContentVersion>0</DataBindingContentVersion>
         <XElements>
            <Element xsi:type="XParagraphFlag" StyleIndex="8" />
         </XElements>
      </Element>
   </XElements>
   <Parameters />
   <UserHistories>
      <History>
         <ID>00    </ID>
         <Name>supervisor</Name>
         <SavedTime>2021-05-10T10:35:39</SavedTime>
         <ClientName />
      </History>
   </UserHistories>
   <ContentStyles>
      <Default xsi:type="DocumentContentStyle">
         <FontSize>12</FontSize>
         <Spacing>1</Spacing>
         <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
         <LineSpacing>4</LineSpacing>
      </Default>
      <Styles>
         <Style Index="0">
            <FontName>宋体</FontName>
            <FontSize>18</FontSize>
            <Bold>true</Bold>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="1">
            <Color>#6D6D6D</Color>
            <FontName>宋体</FontName>
            <FontSize>18</FontSize>
            <Bold>true</Bold>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="2">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacingStyle>Space1pt5</LineSpacingStyle>
            <LineSpacing>4</LineSpacing>
            <Align>Center</Align>
         </Style>
         <Style Index="3">
            <FontName>宋体</FontName>
            <FontSize>16</FontSize>
            <Bold>true</Bold>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="4">
            <FontName>宋体</FontName>
            <FontSize>16</FontSize>
            <Bold>true</Bold>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderStyle>DashDot</BorderStyle>
         </Style>
         <Style Index="5">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="6">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="7">
            <Color>#6D6D6D</Color>
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="8">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <Align>Center</Align>
         </Style>
         <Style Index="9">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="10">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacingStyle>Space1pt5</LineSpacingStyle>
            <LineSpacing>4</LineSpacing>
            <Align>Right</Align>
         </Style>
         <Style Index="11">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacingStyle>Space1pt5</LineSpacingStyle>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="12">
            <Color>#005B5B</Color>
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="13">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Bold>true</Bold>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="14">
            <Color>#005B5B</Color>
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Italic>true</Italic>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="15">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Italic>true</Italic>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="16">
            <Color>#005B5B</Color>
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Italic>true</Italic>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="17">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderStyle>DashDot</BorderStyle>
         </Style>
         <Style Index="18">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <CreatorIndex>0</CreatorIndex>
         </Style>
         <Style Index="19">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Italic>true</Italic>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderStyle>DashDot</BorderStyle>
         </Style>
         <Style Index="20">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderStyle>DashDot</BorderStyle>
         </Style>
         <Style Index="21">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderStyle>DashDot</BorderStyle>
         </Style>
         <Style Index="22">
            <Color>#005B5B</Color>
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderBottomColor>#005B5B</BorderBottomColor>
         </Style>
         <Style Index="23">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacingStyle>Space1pt5</LineSpacingStyle>
            <LineSpacing>4</LineSpacing>
            <FirstLineIndent>-221</FirstLineIndent>
            <LeftIndent>1431</LeftIndent>
         </Style>
         <Style Index="24">
            <Color>#005B5B</Color>
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Bold>true</Bold>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
         </Style>
         <Style Index="25">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacingStyle>Space1pt5</LineSpacingStyle>
            <LineSpacing>4</LineSpacing>
            <FirstLineIndent>1212</FirstLineIndent>
         </Style>
         <Style Index="26">
            <FontName>宋体</FontName>
            <FontSize>11</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacingStyle>Space1pt5</LineSpacingStyle>
            <LineSpacing>4</LineSpacing>
            <FirstLineIndent>-229.7261</FirstLineIndent>
            <LeftIndent>229.7261</LeftIndent>
         </Style>
         <Style Index="27">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <BorderLeft>true</BorderLeft>
            <BorderBottom>true</BorderBottom>
            <BorderTop>true</BorderTop>
            <BorderRight>true</BorderRight>
            <PaddingLeft>15</PaddingLeft>
            <PaddingTop>10</PaddingTop>
            <PaddingRight>15</PaddingRight>
            <PaddingBottom>10</PaddingBottom>
         </Style>
         <Style Index="28">
            <FontSize>12</FontSize>
            <Spacing>1</Spacing>
            <SpacingBeforeParagraph>9</SpacingBeforeParagraph>
            <LineSpacing>4</LineSpacing>
            <Align>Center</Align>
         </Style>
      </Styles>
   </ContentStyles>
   <RepeatedImages />
   <GlobalJavaScriptReferences />
   <Info>
      <LicenseText>未注册|Unregister</LicenseText>
      <CreationTime>1980-01-01T00:00:00</CreationTime>
      <LastModifiedTime>2021-05-10T13:21:01.9277926+08:00</LastModifiedTime>
      <LastPrintTime>1980-01-01T00:00:00</LastPrintTime>
      <Operator>DCSoft.Writer Version:1.2019.11.27</Operator>
   </Info>
   <BodyText>姓名： 韦小光 出生地： 陕西省 
性别： 女 职业：   
年龄： 25岁 入院日期： 2014-08-20 18:42 
民族： 汉族 记录日期： 2021-05-10 10:35 
婚姻： 未婚 病史陈述者：   
主诉：
现病史：
既往史：，，传染病名称：，持续时间：天，手术名称：，手术日期：，外伤原因：，外伤时间：，过敏药物：，过敏情况：，过敏源：，疫苗名称：，曾患，，手术日期：，手术名称：，外伤时间：，输血日期：，输血反应：无，过敏药物：，过敏食物：一般健康状况：健康
        疾病史：无，曾患
        传染病史及其密切接触史：无“”传染病史，无传染病接触史
        手术外伤史：手术史：无，手术日期：，手术名称：，外伤史：无，外伤时间：
        输血史：无，输血日期：，输血品种：，输血反应：无
        过敏史：药物过敏史：无，过敏药物：；食物过敏史：无，过敏食物：
        预防接种史：不详
个人史：，日吸支，日饮ml，生于陕西省，无外地久居史，生活规律，否认吸烟史，日吸支；否认饮酒史，日饮酒ml，，无毒物、粉尘及放射性物质接触史，无冶游史。无重大精神创伤史。
月经史：月经正常，初潮年龄,经期,周期,末次月经/绝经年龄 ，经量正常，无痛经。
婚育史：岁结婚年龄结婚，结婚年，配偶年龄：岁，配偶健康情况：健康，性生活协调，婚姻家庭关系和睦。育有子女，孩子健康状况：良好。未婚，结婚年龄：，配偶，未育，次，次，育有子女，孩子健康状况：良好。
家族史：遗传病：无，传染病：无，近亲结婚：否。
        父：健在，母：健在，兄弟姐妹健在。
体  格  检  查
             T ℃  P 次/分  R 次/分 Bp /mmhg
一般情况：神志清醒，精神正常，发育正常，营养良好，自主体位，查体合作。
皮肤黏膜：无黄染，无出血点。
浅表淋巴结：未触及肿大。
头部及其器官：头颅形状：正常，眼睑正常、无充血、无苍白，双侧瞳孔等圆、等大，对光反射存在。耳鼻正常，口唇无发绀，扁桃体无肿大、无化脓。
颈部：颈软，气管居中，甲状腺无肿大，无颈静脉怒张。
胸部：胸廓对称，双侧呼吸运动对称，双肺未及。心前区无隆起，心界正常，心率次/分，律规整，各瓣膜听诊区未闻及病理性杂音。
脊柱四肢：脊柱正常、四肢(正常)，四肢活动自如。
神经系统：腹壁反射正常，膝腱反射正常，巴氏征无，脑膜刺激征阴性。
外生殖器：外观正常。
专科情况：
辅  助  检  查
    
初步诊断：1.病毒性脑膜脑炎
2.中枢神经系统的慢病毒感染
医师签名：supervisor
修正诊断：1.病毒性脑膜脑炎
2.森林型黄热病


补充诊断：1.病毒性脑膜脑炎
2.带状疱疹并发眼睑皮炎</BodyText>
   <Comments />
   <LocalConfig />
   <PageSettings>
      <DocumentGridLine>
         <ColorValue>#00000000</ColorValue>
         <GridNumInOnePage>40</GridNumInOnePage>
      </DocumentGridLine>
      <LeftMargin>57</LeftMargin>
      <TopMargin>98</TopMargin>
      <RightMargin>57</RightMargin>
      <BottomMargin>37</BottomMargin>
      <StrictUsePageSize>false</StrictUsePageSize>
   </PageSettings>
</XTextDocument>'

export default xml
