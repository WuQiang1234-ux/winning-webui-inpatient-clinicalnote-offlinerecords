const xml =
  '﻿<?xml version="1.0" encoding="utf-8"?>
<XTextDocument xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" EditorVersionString="1.2020.12.2">
   <XElements>
      <Element xsi:type="XTextHeader">
         <ID>divXTextDocumentHeaderElement</ID>
         <AcceptTab>true</AcceptTab>
         <XElements>
            <Element xsi:type="XInputField" StyleIndex="4">
               <ID>SYS00.122</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>医院名称</Name>
               <BackgroundText>医院名称</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="0" />
            <Element xsi:type="XString" StyleIndex="1">
               <Text>入院记录</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="0" />
            <Element xsi:type="XString" StyleIndex="2">
               <Text>姓名:</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.147</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>姓名</Name>
               <BackgroundText>姓名</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="3">
               <Text>  </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>性别：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.148</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>性别</Name>
               <BackgroundText>性别</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="3">
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>年龄：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.149</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>年龄</Name>
               <BackgroundText>年龄</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="3">
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>科别：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.135</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>科室</Name>
               <BackgroundText>科室</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="3">
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>床号:</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.136</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>床号</Name>
               <BackgroundText>床号</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="3">
               <Text> </Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>住院号：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.142</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>住院号</Name>
               <BackgroundText>住院号</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>    </Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="0" />
         </XElements>
      </Element>
      <Element xsi:type="XTextBody">
         <ID>divDocumentBody_0</ID>
         <AcceptTab>true</AcceptTab>
         <XElements>
            <Element xsi:type="XTextTable" NumOfRows="5" NumOfColumns="2">
               <ID>table1</ID>
               <XElements>
                  <Element xsi:type="XTextTableRow">
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>    姓名：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.147</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>姓名</Name>
                                 <BackgroundText>姓名</BackgroundText>
                              </Element>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text> </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>出生地：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.154</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>籍贯</Name>
                                 <BackgroundText>籍贯</BackgroundText>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                     </XElements>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>    性别：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.148</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>性别</Name>
                                 <BackgroundText>性别</BackgroundText>
                              </Element>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text> </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>职业：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.152</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>职业</Name>
                                 <BackgroundText>职业</BackgroundText>
                              </Element>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text> </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                     </XElements>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>    年龄：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.149</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>年龄</Name>
                                 <BackgroundText>年龄</BackgroundText>
                              </Element>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text> </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>民族：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.155</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>民族</Name>
                                 <BackgroundText>民族</BackgroundText>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                     </XElements>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>    婚姻：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.150</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <BorderElementColor />
                                 <Name>婚姻</Name>
                                 <BackgroundText>婚姻</BackgroundText>
                              </Element>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text> </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>病史陈述者： </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                     </XElements>
                  </Element>
                  <Element xsi:type="XTextTableRow">
                     <XElements>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>    入院日期：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.124</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <StartBorderText>[</StartBorderText>
                                 <EndBorderText>]</EndBorderText>
                                 <BorderElementColor />
                                 <Name>入院日期</Name>
                                 <BackgroundText>入院日期</BackgroundText>
                              </Element>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text> </Text>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                        <Element xsi:type="XTextTableCell" StyleIndex="6">
                           <XElements>
                              <Element xsi:type="XString" StyleIndex="2">
                                 <Text>记录日期：</Text>
                              </Element>
                              <Element xsi:type="XInputField" StyleIndex="5">
                                 <ID>SYS00.190</ID>
                                 <EnableValueValidate>true</EnableValueValidate>
                                 <ContentReadonly>False</ContentReadonly>
                                 <XElements />
                                 <StartBorderText>[</StartBorderText>
                                 <EndBorderText>]</EndBorderText>
                                 <BorderElementColor />
                                 <Name>记录日期</Name>
                                 <BackgroundText>记录日期</BackgroundText>
                              </Element>
                              <Element xsi:type="XParagraphFlag" StyleIndex="9" />
                           </XElements>
                        </Element>
                     </XElements>
                  </Element>
               </XElements>
               <Columns>
                  <Element xsi:type="XTextTableColumn">
                     <Width>937.375</Width>
                  </Element>
                  <Element xsi:type="XTextTableColumn">
                     <Width>937.375</Width>
                  </Element>
               </Columns>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    主  诉：</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    现病史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.071.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>现病史</Name>
               <BackgroundText>现病史</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="3">
               <Text>我的主诉</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="10">
               <Attributes>
                  <Attribute>
                     <Name>1</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>2</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>1</Name>
                     <Value>A</Value>
                  </Attribute>
                  <Attribute>
                     <Name>2</Name>
                     <Value>20</Value>
                  </Attribute>
               </Attributes>
               <ID>DHDE005.0012.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>1</Name>
               <BackgroundText>主诉</BackgroundText>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="10">
               <Attributes>
                  <Attribute>
                     <Name>9</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>DHDE001.0002.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>4</Name>
               <DisplayFormat>
                  <Style>DateTime</Style>
                  <Format>yyyy年MM月dd日</Format>
               </DisplayFormat>
               <BackgroundText>出生日期</BackgroundText>
               <FieldSettings>
                  <EditStyle>DateTime</EditStyle>
               </FieldSettings>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="7">
               <Attributes>
                  <Attribute>
                     <Name>3</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>4</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>5</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>3</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>4</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>5</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>3</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>4</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>5</Name>
                     <Value />
                  </Attribute>
               </Attributes>
               <ID>DHDE014.0004.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="7">
                     <Text>意识模糊</Text>
                  </Element>
               </XElements>
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>2</Name>
               <BackgroundText>神志情况代码</BackgroundText>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>清醒</Text>
                        </Item>
                        <Item>
                           <Text>瞌睡</Text>
                        </Item>
                        <Item>
                           <Text>意识模糊</Text>
                        </Item>
                        <Item>
                           <Text>昏睡</Text>
                        </Item>
                        <Item>
                           <Text>浅迷糊</Text>
                        </Item>
                        <Item>
                           <Text>深昏迷</Text>
                        </Item>
                        <Item>
                           <Text>谵妄</Text>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="7">
               <Attributes>
                  <Attribute>
                     <Name>8</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>8</Name>
                     <Value>科室代码</Value>
                  </Attribute>
                  <Attribute>
                     <Name>8</Name>
                     <Value>科室代码</Value>
                  </Attribute>
               </Attributes>
               <ID>DHDE005.0827.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="7">
                     <Text>肿胀,结节,乳溢,瘙痒,意识障碍,头晕,心悸,胸闷,呼吸困难,感觉异常,水肿,尿频,尿痛,尿失禁,排尿困难,血尿,性功能改变,肿块,静脉曲张,活动不利,腹胀,食欲异常,记忆障碍,排便异常,呕血,发热,干燥,视力下降,晨僵,疹,雷诺,脱发,溃疡</Text>
                  </Element>
               </XElements>
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>3</Name>
               <BackgroundText>专科症状代码</BackgroundText>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <MultiSelect>true</MultiSelect>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>损伤</Text>
                           <Value>1</Value>
                        </Item>
                        <Item>
                           <Text>疼痛</Text>
                           <Value>2</Value>
                        </Item>
                        <Item>
                           <Text>肿胀</Text>
                           <Value>3</Value>
                        </Item>
                        <Item>
                           <Text>结节</Text>
                           <Value>4</Value>
                        </Item>
                        <Item>
                           <Text>乳溢</Text>
                           <Value>5</Value>
                        </Item>
                        <Item>
                           <Text>瘙痒</Text>
                           <Value>6</Value>
                        </Item>
                        <Item>
                           <Text>意识障碍</Text>
                           <Value>7</Value>
                        </Item>
                        <Item>
                           <Text>头晕</Text>
                           <Value>8</Value>
                        </Item>
                        <Item>
                           <Text>心悸</Text>
                           <Value>9</Value>
                        </Item>
                        <Item>
                           <Text>胸闷</Text>
                           <Value>10</Value>
                        </Item>
                        <Item>
                           <Text>呼吸困难</Text>
                           <Value>11</Value>
                        </Item>
                        <Item>
                           <Text>感觉异常</Text>
                           <Value>12</Value>
                        </Item>
                        <Item>
                           <Text>水肿</Text>
                           <Value>13</Value>
                        </Item>
                        <Item>
                           <Text>尿频</Text>
                           <Value>14</Value>
                        </Item>
                        <Item>
                           <Text>尿痛</Text>
                           <Value>15</Value>
                        </Item>
                        <Item>
                           <Text>尿失禁</Text>
                           <Value>16</Value>
                        </Item>
                        <Item>
                           <Text>排尿困难</Text>
                           <Value>17</Value>
                        </Item>
                        <Item>
                           <Text>血尿</Text>
                           <Value>18</Value>
                        </Item>
                        <Item>
                           <Text>性功能改变</Text>
                           <Value>19</Value>
                        </Item>
                        <Item>
                           <Text>肿块</Text>
                           <Value>20</Value>
                        </Item>
                        <Item>
                           <Text>静脉曲张</Text>
                           <Value>21</Value>
                        </Item>
                        <Item>
                           <Text>活动不利</Text>
                           <Value>22</Value>
                        </Item>
                        <Item>
                           <Text>腹胀</Text>
                           <Value>23</Value>
                        </Item>
                        <Item>
                           <Text>食欲异常</Text>
                           <Value>24</Value>
                        </Item>
                        <Item>
                           <Text>记忆障碍</Text>
                           <Value>25</Value>
                        </Item>
                        <Item>
                           <Text>排便异常</Text>
                           <Value>26</Value>
                        </Item>
                        <Item>
                           <Text>呕血</Text>
                           <Value>27</Value>
                        </Item>
                        <Item>
                           <Text>发热</Text>
                           <Value>28</Value>
                        </Item>
                        <Item>
                           <Text>干燥</Text>
                           <Value>29</Value>
                        </Item>
                        <Item>
                           <Text>视力下降</Text>
                           <Value>30</Value>
                        </Item>
                        <Item>
                           <Text>晨僵</Text>
                           <Value>31</Value>
                        </Item>
                        <Item>
                           <Text>疹</Text>
                           <Value>32</Value>
                        </Item>
                        <Item>
                           <Text>雷诺</Text>
                           <Value>33</Value>
                        </Item>
                        <Item>
                           <Text>脱发</Text>
                           <Value>34</Value>
                        </Item>
                        <Item>
                           <Text>溃疡</Text>
                           <Value>35</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    既往史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.008.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>传染病史</Name>
               <BackgroundText>传染病史</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.026.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>疾病史（含外伤）</Name>
               <BackgroundText>疾病史（含外伤）</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.100.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>输血史</Name>
               <BackgroundText>输血史</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.022.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>过敏史</Name>
               <BackgroundText>过敏史</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.061.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>手术史</Name>
               <BackgroundText>手术史</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.101.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>预防接种史</Name>
               <BackgroundText>预防接种史</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    个人史：</Text>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>生于</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009112435</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <BackgroundText>出生地</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>，外地久居史，生活规律，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>xys</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>有</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>1</InnerValue>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>有</Text>
                           <Value>1</Value>
                        </Item>
                        <Item>
                           <Text>无</Text>
                           <Value>0</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>吸烟史</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>DE03.00.053.00</ID>
               <PropertyExpressions>
                  <Item Name="Visible">[xys]='1'</Item>
               </PropertyExpressions>
               <EnableValueValidate>true</EnableValueValidate>
               <VisibleExpression>[xys]='1'</VisibleExpression>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，日吸（）支</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>，日吸（）支</InnerValue>
               <BackgroundText>日吸烟量（支）</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <ID>DE03.00.072.00</ID>
               <PropertyExpressions>
                  <Item Name="Visible">[xys]='1'</Item>
               </PropertyExpressions>
               <EnableValueValidate>true</EnableValueValidate>
               <VisibleExpression>[xys]='1'</VisibleExpression>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>吸烟（）年</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>吸烟时长（年）</Name>
               <InnerValue>吸烟（）年</InnerValue>
               <BackgroundText>吸烟时长（年）</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>；</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>yjs</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>无</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>0</InnerValue>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>有</Text>
                           <Value>1</Value>
                        </Item>
                        <Item>
                           <Text>无</Text>
                           <Value>0</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>饮酒史，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009112015_3_32</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>无</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>0</InnerValue>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>有</Text>
                           <Value>1</Value>
                        </Item>
                        <Item>
                           <Text>无</Text>
                           <Value>0</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>毒物、粉尘及放射性物质接触史，</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009112015_3_33</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>无</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>0</InnerValue>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>有</Text>
                           <Value>1</Value>
                        </Item>
                        <Item>
                           <Text>无</Text>
                           <Value>0</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>冶游史</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    婚育史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.098.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>婚育史</Name>
               <BackgroundText>婚育史</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    家族史：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE02.10.103.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>家族史</Name>
               <BackgroundText>家族史</BackgroundText>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="10">
               <Attributes>
                  <Attribute>
                     <Name>3</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>4</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>5</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>3</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>4</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>5</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>3</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>4</Name>
                     <Value />
                  </Attribute>
                  <Attribute>
                     <Name>5</Name>
                     <Value />
                  </Attribute>
               </Attributes>
               <ID>DHDE014.0004.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>2</Name>
               <BackgroundText>神志情况代码</BackgroundText>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
               </FieldSettings>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>体 格 检 查</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="2">
               <Text>T </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE04.10.186.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>体温（℃）</Name>
               <BackgroundText>体温（℃）</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>  P </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE04.10.118.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>脉率（次/min）</Name>
               <BackgroundText>脉率（次/min）</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text> R</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE04.10.082.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>呼吸频率（次/min）</Name>
               <BackgroundText>呼吸频率（次/min）</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>  BP </Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE04.10.174.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>收缩压（mmHg）</Name>
               <BackgroundText>收缩压（mmHg）</BackgroundText>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>/</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE04.10.176.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>舒张压（mmHg）</Name>
               <BackgroundText>舒张压（mmHg）</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    一般情况：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009113626</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>发育正常，营养良好，神志清楚，精神</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>TextBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>3</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009113657</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements />
                     <BorderElementColor />
                     <BackgroundText>精神状况</BackgroundText>
                     <EditorActiveMode>MouseClick</EditorActiveMode>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，体位：自主，呼吸正常，查体合作。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>发育正常，营养良好，神志清楚，精神，体位：自主，呼吸正常，查体合作。</InnerValue>
               <BackgroundText>一般情况</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    皮肤黏膜：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009113848</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>TextBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>3</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009112015_15_21</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>0</InnerValue>
                     <EditorActiveMode>MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value>1</Value>
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value>0</Value>
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>黄染，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>TextBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>3</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009112015_15_22</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>0</InnerValue>
                     <EditorActiveMode>MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value>1</Value>
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value>0</Value>
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>出血点。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>无黄染，无出血点。</InnerValue>
               <BackgroundText>皮肤黏膜</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    浅表淋巴结：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009114000</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>未触及肿大。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>未触及肿大。</InnerValue>
               <BackgroundText>浅表淋巴结</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    头部及其器官：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009114540</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>头颅形状：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_94</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>。眼睑</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_95</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，球结膜</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_96</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，两侧瞳孔等圆、等大，对光反射存在。鼻</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_98</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，通气尚可，外耳道无脓性分泌物。口唇无发绀，伸舌居中，扁桃体肿大，咽部</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_97</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>头颅形状：[正常]。眼睑[正常]，球结膜[正常]，两侧瞳孔等圆、等大，对光反射存在。鼻[正常]，通气尚可，外耳道无脓性分泌物。口唇无发绀，伸舌居中，扁桃体肿大，咽部[正常]。</InnerValue>
               <BackgroundText>头部及其器官</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    颈部：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009130357</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>活动自如，无颈静脉怒张，气管居中。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>活动自如，无颈静脉怒张，气管居中。</InnerValue>
               <BackgroundText>颈部</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    胸部：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009130439</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>形状：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，肋间隙</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_72</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，呼吸：规则。双侧呼吸运动对称，节律规整。触诊无胸膜摩擦感及握雪感，语音震颤对称。叩诊呈正常清音听诊双肺呼吸音</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_73</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，呼气音</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>延长，双上肺未及中湿罗音，双肺底未及中湿罗音。心前区</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74_93</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>隆起，剑突下可见心间搏动，范围（）cm。未触及细震颤。心界</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_75</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，心率（）次/分，律齐，各瓣膜听诊区未闻及病理性杂音。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>形状：[正常]，肋间隙[正常]，呼吸：规则。双侧呼吸运动对称，节律规整。触诊无胸膜摩擦感及握雪感，语音震颤对称。叩诊呈正常清音听诊双肺呼吸音[正常]，呼气音[无]延长，双上肺未及中湿罗音，双肺底未及中湿罗音。心前区[无]隆起，剑突下可见心间搏动，范围（）cm。未触及细震颤。心界[正常]，心率（）次/分，律齐，各瓣膜听诊区未闻及病理性杂音。</InnerValue>
               <BackgroundText>胸部</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    腹部：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009131445</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>全腹软，全腹</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74_90</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>压痛、</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74_91</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>反跳痛，肝肋缘下（）cm。剑突下（）cm，质软，边缘整齐，轻微触痛‘脾未触及。移动性浊音（</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74_92</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>）。肠鸣音</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_89</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>全腹软，全腹[无]压痛、[无]反跳痛，肝肋缘下（）cm。剑突下（）cm，质软，边缘整齐，轻微触痛‘脾未触及。移动性浊音（[无]）。肠鸣音[正常]。</InnerValue>
               <BackgroundText>腹部</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    直肠肝门：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009131648</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>正常</InnerValue>
               <BackgroundText>直肠肝门</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    外生殖器：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009131648_23</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_77</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>正常</InnerValue>
               <BackgroundText>外生殖器</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    脊柱四肢：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009131731</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>脊柱</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_99</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>、四肢（</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_84</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>），运动</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_85</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，关节</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74_86</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>红肿，</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_74_87</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>无</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>无</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>有</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>无</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>杵状指、趾，双下膝关节下</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_76_88</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>正常</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>异常</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>脊柱正常、四肢（正常），运动正常，关节无红肿，无杵状指、趾，双下膝关节下正常。</InnerValue>
               <BackgroundText>脊柱四肢</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    神经系统：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <Attributes>
                  <Attribute>
                     <Name>NsoElementTypeName</Name>
                     <Value>NewControl</Value>
                  </Attribute>
                  <Attribute>
                     <Name>NsoControlTypeName</Name>
                     <Value>TextBox</Value>
                  </Attribute>
                  <Attribute>
                     <Name>Type</Name>
                     <Value>3</Value>
                  </Attribute>
               </Attributes>
               <ID>20201009131950</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>腹壁反射</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_78</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>减弱</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>消失</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>亢进</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>存在</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，肱二头肌反射</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_78_79</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>减弱</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>消失</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>亢进</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>存在</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，肱三头肌反射</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_78_80</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>存在</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>存在</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>减弱</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>消失</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>亢进</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>存在</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，膝腱反射</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_78_81</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>减弱</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>消失</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>亢进</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>存在</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，跟腱反射</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174612_78_82</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>正常</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>正常</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>减弱</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>消失</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>亢进</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>存在</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，巴彬斯基征</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174950</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>阴性</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>阴性</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>阴性</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>阳性</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>，脑膜刺激征</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="2">
                     <Attributes>
                        <Attribute>
                           <Name>NsoElementTypeName</Name>
                           <Value>NewControl</Value>
                        </Attribute>
                        <Attribute>
                           <Name>NsoControlTypeName</Name>
                           <Value>ListBox</Value>
                        </Attribute>
                        <Attribute>
                           <Name>Type</Name>
                           <Value>2</Value>
                        </Attribute>
                     </Attributes>
                     <ID>20201009174950_83</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="2">
                           <Text>阴性</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>阴性</InnerValue>
                     <BackgroundText>XX</BackgroundText>
                     <EditorActiveMode>F2 MouseDblClick MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                        <ListSource>
                           <Items>
                              <Item>
                                 <Text>阴性</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>阳性</Text>
                                 <Value />
                              </Item>
                              <Item>
                                 <Text>未查</Text>
                                 <Value />
                              </Item>
                           </Items>
                        </ListSource>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>。</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <InnerValue>腹壁反射[正常]，肱二头肌反射[正常]，肱三头肌反射[存在]，膝腱反射[正常]，跟腱反射[正常]，巴彬斯基征[阴性]，脑膜刺激征[阴性]。</InnerValue>
               <BackgroundText>神经系统</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>    专科情况：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>DE08.10.061.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>专科情况</Name>
               <BackgroundText>专科情况</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>辅 助 检 查</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="11" />
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XInputField" StyleIndex="10">
               <ID>DE04.30.010.00</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>辅助检查项目</Name>
               <BackgroundText>辅助检查项目</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="9" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>初步诊断：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN62.00.04</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>初步诊断</Name>
               <BackgroundText>初步诊断</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="12" />
            <Element xsi:type="XString" StyleIndex="8">
               <Text>医师签名：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>SYS00.175</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>False</ContentReadonly>
               <XElements />
               <StartBorderText>[</StartBorderText>
               <EndBorderText>]</EndBorderText>
               <BorderElementColor />
               <Name>医师签名</Name>
               <BackgroundText>医师签名</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="12" />
         </XElements>
      </Element>
      <Element xsi:type="XTextFooter">
         <ID>divXTextDocumentFooterElement</ID>
         <AcceptTab>true</AcceptTab>
         <XElements>
            <Element xsi:type="XParagraphFlag" />
         </XElements>
      </Element>
   </XElements>
   <SerializeParameterValue>true</SerializeParameterValue>
   <FileFormat>xml</FileFormat>
   <ContentStyles>
      <Default xsi:type="DocumentContentStyle">
         <FontName>宋体</FontName>
         <FontSize>12</FontSize>
      </Default>
      <Styles>
         <Style Index="0">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Align>Center</Align>
         </Style>
         <Style Index="1">
            <FontName>黑体</FontName>
            <FontSize>15.75</FontSize>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="2">
            <FontName>宋体</FontName>
            <FontSize>10.5</FontSize>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="3">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="4">
            <BackgroundColor>#F0F8FF</BackgroundColor>
            <FontName>宋体</FontName>
            <FontSize>18</FontSize>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="5">
            <BackgroundColor>#F0F8FF</BackgroundColor>
            <FontName>宋体</FontName>
            <FontSize>10.5</FontSize>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="6">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <BorderLeft>true</BorderLeft>
            <BorderBottom>true</BorderBottom>
            <BorderTop>true</BorderTop>
            <BorderRight>true</BorderRight>
            <PaddingLeft>15</PaddingLeft>
            <PaddingTop>10</PaddingTop>
            <PaddingRight>15</PaddingRight>
            <PaddingBottom>10</PaddingBottom>
         </Style>
         <Style Index="7">
            <BackgroundColor>#F0F8FF</BackgroundColor>
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
         </Style>
         <Style Index="8">
            <FontName>宋体</FontName>
            <FontSize>10.5</FontSize>
            <Bold>true</Bold>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="9">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <LineSpacingStyle>SpaceMultiple</LineSpacingStyle>
            <LineSpacing>1.35</LineSpacing>
         </Style>
         <Style Index="10">
            <BackgroundColor>#F0F8FF</BackgroundColor>
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <BorderWidth>1</BorderWidth>
         </Style>
         <Style Index="11">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <LineSpacingStyle>SpaceMultiple</LineSpacingStyle>
            <LineSpacing>1.35</LineSpacing>
            <Align>Center</Align>
         </Style>
         <Style Index="12">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <LineSpacingStyle>SpaceMultiple</LineSpacingStyle>
            <LineSpacing>1.35</LineSpacing>
            <Align>Right</Align>
         </Style>
      </Styles>
   </ContentStyles>
   <Info>
      <LicenseText>卫宁健康:卫宁健康</LicenseText>
      <CreationTime>1980-01-01T00:00:00</CreationTime>
      <LastModifiedTime>2020-12-31T14:46:10.0087234+08:00</LastModifiedTime>
      <LastPrintTime>1980-01-01T00:00:00</LastPrintTime>
      <Operator>DCSoft.Writer Version:1.2020.4.23</Operator>
      <NumOfPage>2</NumOfPage>
   </Info>
   <BodyText>    姓名：  出生地： 
    性别：  职业：  
    年龄：  民族： 
    婚姻：  病史陈述者：  
    入院日期：  记录日期： 
    主  诉：
    现病史：我的主诉意识模糊肿胀,结节,乳溢,瘙痒,意识障碍,头晕,心悸,胸闷,呼吸困难,感觉异常,水肿,尿频,尿痛,尿失禁,排尿困难,血尿,性功能改变,肿块,静脉曲张,活动不利,腹胀,食欲异常,记忆障碍,排便异常,呕血,发热,干燥,视力下降,晨僵,疹,雷诺,脱发,溃疡
    既往史：，，，，，
    个人史：生于，外地久居史，生活规律，有吸烟史，日吸（）支吸烟（）年；无饮酒史，无毒物、粉尘及放射性物质接触史，无冶游史
    婚育史：
    家族史：
体 格 检 查
T   P  R  BP /
    一般情况：发育正常，营养良好，神志清楚，精神，体位：自主，呼吸正常，查体合作。
    皮肤黏膜：无黄染，无出血点。
    浅表淋巴结：未触及肿大。
    头部及其器官：头颅形状：正常。眼睑正常，球结膜正常，两侧瞳孔等圆、等大，对光反射存在。鼻正常，通气尚可，外耳道无脓性分泌物。口唇无发绀，伸舌居中，扁桃体肿大，咽部正常。
    颈部：活动自如，无颈静脉怒张，气管居中。
    胸部：形状：正常，肋间隙正常，呼吸：规则。双侧呼吸运动对称，节律规整。触诊无胸膜摩擦感及握雪感，语音震颤对称。叩诊呈正常清音听诊双肺呼吸音正常，呼气音无延长，双上肺未及中湿罗音，双肺底未及中湿罗音。心前区无隆起，剑突下可见心间搏动，范围（）cm。未触及细震颤。心界正常，心率（）次/分，律齐，各瓣膜听诊区未闻及病理性杂音。
    腹部：全腹软，全腹无压痛、无反跳痛，肝肋缘下（）cm。剑突下（）cm，质软，边缘整齐，轻微触痛‘脾未触及。移动性浊音（无）。肠鸣音正常。
    直肠肝门：正常
    外生殖器：正常
    脊柱四肢：脊柱正常、四肢（正常），运动正常，关节无红肿，无杵状指、趾，双下膝关节下正常。
    神经系统：腹壁反射正常，肱二头肌反射正常，肱三头肌反射存在，膝腱反射正常，跟腱反射正常，巴彬斯基征阴性，脑膜刺激征阴性。
    专科情况：
辅 助 检 查


初步诊断：
医师签名：</BodyText>
   <LocalConfig>
      <OldWhitespaceWidth>true</OldWhitespaceWidth>
   </LocalConfig>
   <PageSettings>
      <StrictUsePageSize>false</StrictUsePageSize>
   </PageSettings>
</XTextDocument>'

export default xml
