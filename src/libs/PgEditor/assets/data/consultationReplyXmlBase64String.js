const xml =
  '﻿<?xml version="1.0" encoding="utf-8"?>
<XTextDocument xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" EditorVersionString="1.2021.2.25">
   <XElements>
      <Element xsi:type="XTextHeader">
         <ID>divXTextDocumentHeaderElement</ID>
         <AcceptTab>true</AcceptTab>
         <XElements>
            <Element xsi:type="XInputField" StyleIndex="1">
               <ID>WIN1.347743.11844</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="1">
                     <Text>上海市第六人民医院东院</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>医疗机构名称</Name>
               <InnerValue>上海市第六人民医院东院</InnerValue>
               <BackgroundText>医疗机构名称</BackgroundText>
               <FieldSettings />
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="4" />
            <Element xsi:type="XString" StyleIndex="3">
               <Text>会诊记录</Text>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="0" />
            <Element xsi:type="XString" StyleIndex="2">
               <Text>姓名：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <ID>WIN1.347720.375821</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>测试LRF01</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>患者姓名</Name>
               <InnerValue>测试LRF01</InnerValue>
               <BackgroundText>患者姓名</BackgroundText>
               <FieldSettings />
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>性别：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <ID>WIN1.347720.10050</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>True</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>性别</Name>
               <InnerValue>50602</InnerValue>
               <BackgroundText>性别</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>男性</Text>
                           <Value>65432</Value>
                        </Item>
                        <Item>
                           <Text>女性</Text>
                           <Value>65432</Value>
                        </Item>
                        <Item>
                           <Text>未说明的性别</Text>
                           <Value>65432</Value>
                        </Item>
                        <Item>
                           <Text>未知的性别</Text>
                           <Value>65432</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>年龄：</Text>
            </Element>
            <Element xsi:type="XInputField">
               <ID>WIN1.347720.10069</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <MaxValue>100</MaxValue>
                  <MinValue>1</MinValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>年龄（岁）</Name>
               <BackgroundText>年龄</BackgroundText>
               <FieldSettings>
                  <EditStyle>Numeric</EditStyle>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>科室：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <ID>WIN1.347722.10253</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>True</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>科室</Name>
               <BackgroundText>科室</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
               </FieldSettings>
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>住院号：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <ID>WIN1.347722.10314</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="2">
                     <Text>2021030800001812</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>住院号</Name>
               <InnerValue>2021030800001812</InnerValue>
               <BackgroundText>住院号</BackgroundText>
               <FieldSettings />
            </Element>
            <Element xsi:type="XString" StyleIndex="2">
               <Text>床号：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="2">
               <ID>WIN1.347724.399329910</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>病床号</Name>
               <BackgroundText>病床号</BackgroundText>
               <FieldSettings />
            </Element>
            <Element xsi:type="XParagraphFlag" />
         </XElements>
      </Element>
      <Element xsi:type="XTextBody">
         <ID>divDocumentBody_0</ID>
         <AcceptTab>true</AcceptTab>
         <XElements>
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊类型</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.11575</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>会诊类型：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347724.399303417</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>科间会诊</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊类型代码</Name>
               <InnerValue>977572</InnerValue>
               <BackgroundText>会诊类型</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>科间会诊</Text>
                           <Value>977572</Value>
                        </Item>
                        <Item>
                           <Text>全院会诊</Text>
                           <Value>977573</Value>
                        </Item>
                        <Item>
                           <Text>院外会诊</Text>
                           <Value>977574</Value>
                        </Item>
                        <Item>
                           <Text>多学科联合会诊</Text>
                           <Value>399299500</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊级别</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.399331942</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>会诊级别：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347751.399331942</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>平会诊</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊级别代码</Name>
               <InnerValue>977577</InnerValue>
               <BackgroundText>会诊级别</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DropdownList</EditStyle>
                  <ListSource>
                     <Items>
                        <Item>
                           <Text>平会诊</Text>
                           <Value>977577</Value>
                        </Item>
                        <Item>
                           <Text>急会诊</Text>
                           <Value>977578</Value>
                        </Item>
                        <Item>
                           <Text>主任会诊</Text>
                           <Value>977579</Value>
                        </Item>
                        <Item>
                           <Text>特殊使用级抗菌药物会诊</Text>
                           <Value>977580</Value>
                        </Item>
                     </Items>
                  </ListSource>
               </FieldSettings>
            </Element>
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>简要病情描述</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347724.10466</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>简要病情：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347724.10466</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>癌</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>简要病情描述</Name>
               <InnerValue>癌</InnerValue>
               <BackgroundText>简要病情描述</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊目的</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.11576</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>会诊目的：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347751.11576</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>我问问</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊目的</Name>
               <InnerValue>我问问</InnerValue>
               <BackgroundText>会诊目的</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊日期</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347724.399330216</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>会诊日期：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347751.11577</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>2021年03月23日09时47分</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊日期时间</Name>
               <DisplayFormat>
                  <Style>DateTime</Style>
                  <Format>yyyy年MM月dd日HH时mm分</Format>
               </DisplayFormat>
               <InnerValue>2021-03-23 09:47:22</InnerValue>
               <BackgroundText>会诊日期时间</BackgroundText>
               <EditorActiveMode>MouseClick</EditorActiveMode>
               <FieldSettings>
                  <EditStyle>DateTime</EditStyle>
               </FieldSettings>
            </Element>
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊科室名称</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.11574</ID>
               <Deleteable>false</Deleteable>
               <Width>400.9765</Width>
               <Height>57.03124</Height>
               <Text>被邀请会诊科室：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347751.11574</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>心血管内科</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊科室名称</Name>
               <InnerValue>心血管内科</InnerValue>
               <BackgroundText>会诊科室</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊医师姓名</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.11583</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>会诊医师：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347751.11583</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>何德华,吴卫,张三丰,张心如,张惠箴,李嘉佑,曲忠森</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊医师姓名</Name>
               <InnerValue>何德华,吴卫,张三丰,张心如,张惠箴,李嘉佑,曲忠森</InnerValue>
               <BackgroundText>会诊医师</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="7" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊申请科室</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.11578</ID>
               <Deleteable>false</Deleteable>
               <Width>350.8545</Width>
               <Height>57.03124</Height>
               <Text>会诊申请科室：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.347751.11578</ID>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements>
                  <Element xsi:type="XString" StyleIndex="5">
                     <Text>心血管内科</Text>
                  </Element>
               </XElements>
               <BorderElementColor />
               <Name>会诊申请科室</Name>
               <InnerValue>心血管内科</InnerValue>
               <BackgroundText>会诊申请科室</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="7" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>医师签名</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.384017.399331220</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>医师签名：</Text>
            </Element>
            <Element xsi:type="XInputField" StyleIndex="5">
               <ID>WIN1.384017.399331220</ID>
               <ToolTip>医师签名</ToolTip>
               <EnableValueValidate>true</EnableValueValidate>
               <ValidateStyle>
                  <CheckMaxValue>true</CheckMaxValue>
                  <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
               </ValidateStyle>
               <ContentReadonly>True</ContentReadonly>
               <XElements />
               <BorderElementColor />
               <Name>医师签名</Name>
               <BackgroundText>医师签名</BackgroundText>
            </Element>
            <Element xsi:type="XParagraphFlag" StyleIndex="7" />
            <Element xsi:type="XTextLabelElement" StyleIndex="6">
               <Attributes>
                  <Attribute>
                     <Name>titleName</Name>
                     <Value>会诊意见</Value>
                  </Attribute>
                  <Attribute>
                     <Name>TitleLevel</Name>
                     <Value>1</Value>
                  </Attribute>
                  <Attribute>
                     <Name>required</Name>
                     <Value>false</Value>
                  </Attribute>
               </Attributes>
               <ID>WIN3.347751.11584</ID>
               <Deleteable>false</Deleteable>
               <Width>250.6103</Width>
               <Height>57.03124</Height>
               <Text>会诊意见：</Text>
            </Element>
            <Element xsi:type="XLineBreak" />
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextSubDocument">
               <Attributes>
                  <Attribute>
                     <Name>type</Name>
                     <Value>answer</Value>
                  </Attribute>
                  <Attribute>
                     <Name>orgId</Name>
                     <Value>57397326551443462</Value>
                  </Attribute>
               </Attributes>
               <ID>57393572750026754</ID>
               <AutoFixTextMode>Auto</AutoFixTextMode>
               <AcceptTab>true</AcceptTab>
               <EnablePermission>True</EnablePermission>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="5">
                     <ID>WIN1.347751.11584</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <ValidateStyle>
                        <CheckMaxValue>true</CheckMaxValue>
                        <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
                     </ValidateStyle>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="5">
                           <Text>少时诵诗书所所所哒哒哒哒哒哒多所所所</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <Name>会诊意见</Name>
                     <InnerValue>少时诵诗书所所所哒哒哒哒哒哒多所所所</InnerValue>
                     <BackgroundText>会诊意见</BackgroundText>
                  </Element>
                  <Element xsi:type="XParagraphFlag" />
                  <Element xsi:type="XString">
                     <Text>被邀请科室：</Text>
                  </Element>
                  <Element xsi:type="XInputField">
                     <ID>WIN1.347751.11574</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString">
                           <Text>肾脏风湿科</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>57397326551443462</InnerValue>
                     <BackgroundText>会诊科室名称</BackgroundText>
                     <EditorActiveMode>MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XParagraphFlag" StyleIndex="0" />
                  <Element xsi:type="XString">
                     <Text>会诊医师：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="5">
                     <ID>WIN1.384017.399331220</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <ValidateStyle>
                        <CheckMaxValue>true</CheckMaxValue>
                        <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
                     </ValidateStyle>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="5">
                           <Text>黄曲忠</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <Name>医师签名</Name>
                     <InnerValue>57393746696202243</InnerValue>
                     <BackgroundText>医师签名</BackgroundText>
                  </Element>
                  <Element xsi:type="XParagraphFlag" StyleIndex="0" />
               </XElements>
               <ForeColorForCollapsed />
               <ForeColorValueForCollapsed>#00000000</ForeColorValueForCollapsed>
               <IsCollapsed>true</IsCollapsed>
               <CompressOwnerLineSpacing>true</CompressOwnerLineSpacing>
               <DocumentInfo>
                  <CreationTime>1980-01-01T00:00:00</CreationTime>
                  <LastModifiedTime>1980-01-01T00:00:00</LastModifiedTime>
                  <LastPrintTime>1980-01-01T00:00:00</LastPrintTime>
                  <Operator>DCSoft.Writer Version:1.2021.2.25</Operator>
               </DocumentInfo>
            </Element>
            <Element xsi:type="XParagraphFlag" />
            <Element xsi:type="XTextSubDocument">
               <Attributes>
                  <Attribute>
                     <Name>type</Name>
                     <Value>answer</Value>
                  </Attribute>
                  <Attribute>
                     <Name>orgId</Name>
                     <Value>57397326551443462</Value>
                  </Attribute>
               </Attributes>
               <ID>-1</ID>
               <AutoFixTextMode>Auto</AutoFixTextMode>
               <AcceptTab>true</AcceptTab>
               <EnablePermission>True</EnablePermission>
               <ContentReadonly>False</ContentReadonly>
               <XElements>
                  <Element xsi:type="XInputField" StyleIndex="5">
                     <ID>WIN1.347751.11584</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <ValidateStyle>
                        <CheckMaxValue>true</CheckMaxValue>
                        <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
                     </ValidateStyle>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="5">
                           <Text>我不是被邀请的</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <Name>会诊意见</Name>
                     <InnerValue>我不是被邀请的</InnerValue>
                     <BackgroundText>会诊意见</BackgroundText>
                  </Element>
                  <Element xsi:type="XParagraphFlag" />
                  <Element xsi:type="XString">
                     <Text>被邀请科室：</Text>
                  </Element>
                  <Element xsi:type="XInputField">
                     <ID>WIN1.347751.11574</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <XElements>
                        <Element xsi:type="XString">
                           <Text>肾脏风湿科</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <InnerValue>57397326551443462</InnerValue>
                     <BackgroundText>会诊科室名称</BackgroundText>
                     <EditorActiveMode>MouseClick</EditorActiveMode>
                     <FieldSettings>
                        <EditStyle>DropdownList</EditStyle>
                     </FieldSettings>
                  </Element>
                  <Element xsi:type="XParagraphFlag" StyleIndex="0" />
                  <Element xsi:type="XString">
                     <Text>会诊医师：</Text>
                  </Element>
                  <Element xsi:type="XInputField" StyleIndex="5">
                     <ID>WIN1.384017.399331220</ID>
                     <EnableValueValidate>true</EnableValueValidate>
                     <ValidateStyle>
                        <CheckMaxValue>true</CheckMaxValue>
                        <RequiredInvalidateFlag>false</RequiredInvalidateFlag>
                     </ValidateStyle>
                     <ContentReadonly>False</ContentReadonly>
                     <XElements>
                        <Element xsi:type="XString" StyleIndex="5">
                           <Text>黄曲忠</Text>
                        </Element>
                     </XElements>
                     <BorderElementColor />
                     <Name>医师签名</Name>
                     <InnerValue>57393746696202243</InnerValue>
                     <BackgroundText>医师签名</BackgroundText>
                  </Element>
                  <Element xsi:type="XParagraphFlag" StyleIndex="0" />
               </XElements>
               <ForeColorForCollapsed />
               <ForeColorValueForCollapsed>#00000000</ForeColorValueForCollapsed>
               <IsCollapsed>true</IsCollapsed>
               <CompressOwnerLineSpacing>true</CompressOwnerLineSpacing>
               <DocumentInfo>
                  <CreationTime>1980-01-01T00:00:00</CreationTime>
                  <LastModifiedTime>1980-01-01T00:00:00</LastModifiedTime>
                  <LastPrintTime>1980-01-01T00:00:00</LastPrintTime>
                  <Operator>DCSoft.Writer Version:1.2021.2.25</Operator>
               </DocumentInfo>
            </Element>
            <Element xsi:type="XParagraphFlag">
               <AutoCreate>true</AutoCreate>
            </Element>
         </XElements>
      </Element>
      <Element xsi:type="XTextFooter">
         <ID>divXTextDocumentFooterElement</ID>
         <AcceptTab>true</AcceptTab>
         <XElements>
            <Element xsi:type="XParagraphFlag" />
         </XElements>
      </Element>
   </XElements>
   <SerializeParameterValue>true</SerializeParameterValue>
   <FileFormat>xml</FileFormat>
   <ContentStyles>
      <Default xsi:type="DocumentContentStyle">
         <FontName>宋体</FontName>
         <FontSize>12</FontSize>
      </Default>
      <Styles>
         <Style Index="0">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Align>Center</Align>
         </Style>
         <Style Index="1">
            <BackgroundColor>#F0F8FF</BackgroundColor>
            <FontName>宋体</FontName>
            <FontSize>18</FontSize>
            <Bold>true</Bold>
         </Style>
         <Style Index="2">
            <FontName>宋体</FontName>
            <FontSize>10.5</FontSize>
         </Style>
         <Style Index="3">
            <FontName>宋体</FontName>
            <FontSize>13.5</FontSize>
            <Bold>true</Bold>
         </Style>
         <Style Index="4">
            <FontName>宋体</FontName>
            <FontSize>18</FontSize>
            <Align>Center</Align>
         </Style>
         <Style Index="5">
            <BackgroundColor>#F0F8FF</BackgroundColor>
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
         </Style>
         <Style Index="6">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Bold>true</Bold>
            <TitleLevel>1</TitleLevel>
         </Style>
         <Style Index="7">
            <FontName>宋体</FontName>
            <FontSize>12</FontSize>
            <Align>Right</Align>
         </Style>
      </Styles>
   </ContentStyles>
   <Info>
      <LicenseText>卫宁健康:卫宁健康</LicenseText>
      <CreationTime>1980-01-01T00:00:00</CreationTime>
      <LastModifiedTime>2021-03-23T14:19:57.8422408+08:00</LastModifiedTime>
      <LastPrintTime>1980-01-01T00:00:00</LastPrintTime>
      <Operator>DCSoft.Writer Version:1.2021.1.28</Operator>
      <NumOfPage>1</NumOfPage>
   </Info>
   <BodyText>会诊类型：科间会诊会诊级别：平会诊
简要病情：癌
会诊目的：我问问
会诊日期：2021年03月23日09时47分
被邀请会诊科室：心血管内科

会诊医师：何德华,吴卫,张三丰,张心如,张惠箴,李嘉佑,曲忠森
会诊申请科室：心血管内科
医师签名：
会诊意见：

少时诵诗书所所所哒哒哒哒哒哒多所所所
被邀请科室：肾脏风湿科
会诊医师：黄曲忠
我不是被邀请的
被邀请科室：肾脏风湿科
会诊医师：黄曲忠</BodyText>
   <LocalConfig />
   <PageSettings>
      <StrictUsePageSize>false</StrictUsePageSize>
   </PageSettings>
</XTextDocument>'
export default xml
